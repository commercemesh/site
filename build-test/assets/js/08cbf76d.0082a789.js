"use strict";(self.webpackChunkcommercemesh_site=self.webpackChunkcommercemesh_site||[]).push([[6279],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},70264:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"feeds/implementation","title":"Implementation Guide","description":"This guide walks you through implementing a CMP product feed for your brand, from database to deployment.","source":"@site/docs/feeds/implementation.md","sourceDirName":"feeds","slug":"/feeds/implementation","permalink":"/docs/feeds/implementation","draft":false,"unlisted":false,"editUrl":"https://github.com/commercemesh/commercemesh-site/tree/main/docs/feeds/implementation.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Implementation Guide"},"sidebar":"tutorialSidebar","previous":{"title":"Feed Specification","permalink":"/docs/feeds/specification"},"next":{"title":"Architecture","permalink":"/docs/category/architecture"}}');var r=t(74848),s=t(28453);const a={sidebar_position:3,title:"Implementation Guide"},d="Feed Implementation Guide",o={},l=[{value:"Planning Your Feed",id:"planning-your-feed",level:2},{value:"1. Assess Your Catalog",id:"1-assess-your-catalog",level:3},{value:"2. Choose Implementation Approach",id:"2-choose-implementation-approach",level:3},{value:"Static Generation",id:"static-generation",level:4},{value:"Dynamic Generation",id:"dynamic-generation",level:4},{value:"Hybrid Approach",id:"hybrid-approach",level:4},{value:"Implementation Steps",id:"implementation-steps",level:2},{value:"Step 1: Set Up Data Pipeline",id:"step-1-set-up-data-pipeline",level:3},{value:"Step 2: Connect to Your Database",id:"step-2-connect-to-your-database",level:3},{value:"Step 3: Implement Sharding (if needed)",id:"step-3-implement-sharding-if-needed",level:3},{value:"Step 4: Add Rich Content",id:"step-4-add-rich-content",level:3},{value:"Step 5: Validate Your Feed",id:"step-5-validate-your-feed",level:3},{value:"Step 6: Deploy Your Feed",id:"step-6-deploy-your-feed",level:3},{value:"Option 1: Static Hosting",id:"option-1-static-hosting",level:4},{value:"Option 2: Dynamic API",id:"option-2-dynamic-api",level:4},{value:"Step 7: Set Up Monitoring",id:"step-7-set-up-monitoring",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Performance",id:"performance",level:3},{value:"Reliability",id:"reliability",level:3},{value:"Updates",id:"updates",level:3},{value:"Common Issues",id:"common-issues",level:2},{value:"Large Catalogs",id:"large-catalogs",level:3},{value:"Real-time Inventory",id:"real-time-inventory",level:3},{value:"Image Optimization",id:"image-optimization",level:3},{value:"Testing Checklist",id:"testing-checklist",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"feed-implementation-guide",children:"Feed Implementation Guide"})}),"\n",(0,r.jsx)(n.p,{children:"This guide walks you through implementing a CMP product feed for your brand, from database to deployment."}),"\n",(0,r.jsx)(n.h2,{id:"planning-your-feed",children:"Planning Your Feed"}),"\n",(0,r.jsx)(n.h3,{id:"1-assess-your-catalog",children:"1. Assess Your Catalog"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Product count"}),": Determines if sharding is needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update frequency"}),": Influences caching strategy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data sources"}),": Database, PIM, ERP systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Media assets"}),": Image hosting and CDN needs"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-choose-implementation-approach",children:"2. Choose Implementation Approach"}),"\n",(0,r.jsx)(n.h4,{id:"static-generation",children:"Static Generation"}),"\n",(0,r.jsx)(n.p,{children:"Best for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Small catalogs (< 1000 products)"}),"\n",(0,r.jsx)(n.li,{children:"Infrequent updates"}),"\n",(0,r.jsx)(n.li,{children:"Simple hosting"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"dynamic-generation",children:"Dynamic Generation"}),"\n",(0,r.jsx)(n.p,{children:"Best for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Large catalogs"}),"\n",(0,r.jsx)(n.li,{children:"Frequent updates"}),"\n",(0,r.jsx)(n.li,{children:"Real-time inventory"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"hybrid-approach",children:"Hybrid Approach"}),"\n",(0,r.jsx)(n.p,{children:"Best for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Medium catalogs"}),"\n",(0,r.jsx)(n.li,{children:"Scheduled updates"}),"\n",(0,r.jsx)(n.li,{children:"Balance of performance and freshness"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-steps",children:"Implementation Steps"}),"\n",(0,r.jsx)(n.h3,{id:"step-1-set-up-data-pipeline",children:"Step 1: Set Up Data Pipeline"}),"\n",(0,r.jsx)(n.p,{children:"Create a data extraction pipeline from your systems:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Example: Python feed generator\nimport json\nfrom datetime import datetime\nimport hashlib\n\nclass CMPFeedGenerator:\n    def __init__(self, org_url, org_id):\n        self.org_url = org_url\n        self.org_id = org_id\n        self.products = []\n    \n    def add_product(self, product_data):\n        product = {\n            "@context": "https://schema.org",\n            "@type": "Product",\n            "@id": f"{self.org_url}/products/{product_data[\'sku\']}",\n            "sku": product_data[\'sku\'],\n            "name": product_data[\'name\'],\n            "description": product_data[\'description\'],\n            "image": product_data[\'images\'],\n            "brand": {\n                "@type": "Brand",\n                "@id": f"{self.org_url}/brand#brand"\n            },\n            "organization": {\n                "@type": "Organization",\n                "identifier": {\n                    "@type": "PropertyValue",\n                    "propertyID": "cmp:orgId",\n                    "value": self.org_id\n                }\n            },\n            "offers": {\n                "@type": "Offer",\n                "price": str(product_data[\'price\']),\n                "priceCurrency": product_data[\'currency\'],\n                "availability": self.map_availability(product_data[\'stock\'])\n            }\n        }\n        self.products.append(product)\n    \n    def map_availability(self, stock_level):\n        if stock_level > 0:\n            return "https://schema.org/InStock"\n        return "https://schema.org/OutOfStock"\n    \n    def generate_feed(self, feed_url):\n        return {\n            "@context": "https://schema.org",\n            "@type": "DataFeed",\n            "@id": feed_url,\n            "name": f"Product Feed for {self.org_id}",\n            "dateModified": datetime.utcnow().isoformat() + "Z",\n            "cmp:shardCount": 1,\n            "cmp:shardIndex": 0,\n            "dataFeedElement": self.products\n        }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"step-2-connect-to-your-database",children:"Step 2: Connect to Your Database"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Example: Database connection\nimport psycopg2\n\ndef fetch_products_from_db():\n    conn = psycopg2.connect(\n        host=\"localhost\",\n        database=\"ecommerce\",\n        user=\"user\",\n        password=\"password\"\n    )\n    \n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        SELECT \n            p.sku, \n            p.name, \n            p.description,\n            p.price,\n            i.quantity as stock,\n            array_agg(pi.image_url) as images\n        FROM products p\n        JOIN inventory i ON p.id = i.product_id\n        LEFT JOIN product_images pi ON p.id = pi.product_id\n        WHERE p.active = true\n        GROUP BY p.id, i.quantity\n    \"\"\")\n    \n    products = []\n    for row in cursor.fetchall():\n        products.append({\n            'sku': row[0],\n            'name': row[1],\n            'description': row[2],\n            'price': row[3],\n            'stock': row[4],\n            'images': row[5] or [],\n            'currency': 'USD'\n        })\n    \n    cursor.close()\n    conn.close()\n    return products\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-3-implement-sharding-if-needed",children:"Step 3: Implement Sharding (if needed)"}),"\n",(0,r.jsx)(n.p,{children:"For catalogs > 5MB, implement deterministic sharding:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def calculate_shard(sku, shard_count):\n    """Deterministic sharding based on SKU hash"""\n    hash_value = int(hashlib.md5(sku.encode()).hexdigest(), 16)\n    return hash_value % shard_count\n\ndef generate_sharded_feeds(products, shard_count, base_url):\n    shards = [[] for _ in range(shard_count)]\n    \n    # Distribute products across shards\n    for product in products:\n        shard_index = calculate_shard(product[\'sku\'], shard_count)\n        shards[shard_index].append(product)\n    \n    # Generate feed for each shard\n    feeds = []\n    for i, shard_products in enumerate(shards):\n        generator = CMPFeedGenerator("https://example.com", "urn:cmp:orgid:123e4567-e89b-12d3-a456-426614174000")\n        for product in shard_products:\n            generator.add_product(product)\n        \n        feed_url = f"{base_url}/feed-{i}.json"\n        feed = generator.generate_feed(feed_url)\n        feed[\'cmp:shardCount\'] = shard_count\n        feed[\'cmp:shardIndex\'] = i\n        feeds.append((i, feed))\n    \n    return feeds\n'})}),"\n",(0,r.jsx)(n.h3,{id:"step-4-add-rich-content",children:"Step 4: Add Rich Content"}),"\n",(0,r.jsx)(n.p,{children:"Enhance your products with additional fields:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def enrich_product(product):\n    \"\"\"Add rich content to product data\"\"\"\n    enriched = product.copy()\n    \n    # Add GTIN if available\n    if 'gtin' in product:\n        enriched['gtin'] = product['gtin']\n    \n    # Add categories\n    if 'category_path' in product:\n        enriched['category'] = ' > '.join(product['category_path'])\n    \n    # Add physical dimensions\n    if 'weight' in product:\n        enriched['weight'] = {\n            \"@type\": \"QuantitativeValue\",\n            \"value\": product['weight'],\n            \"unitCode\": \"KGM\"\n        }\n    \n    # Add custom properties\n    if 'attributes' in product:\n        enriched['additionalProperty'] = [\n            {\n                \"@type\": \"PropertyValue\",\n                \"name\": attr['name'],\n                \"value\": attr['value']\n            }\n            for attr in product['attributes']\n        ]\n    \n    return enriched\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-5-validate-your-feed",children:"Step 5: Validate Your Feed"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import jsonschema\n\ndef validate_feed(feed):\n    \"\"\"Validate feed against CMP schema\"\"\"\n    # Basic structure validation\n    required_fields = ['@context', '@type', '@id', 'dataFeedElement']\n    for field in required_fields:\n        if field not in feed:\n            raise ValueError(f\"Missing required field: {field}\")\n    \n    # Validate products\n    for product in feed['dataFeedElement']:\n        validate_product(product)\n    \n    return True\n\ndef validate_product(product):\n    \"\"\"Validate individual product\"\"\"\n    required = ['@type', 'sku', 'name', 'description', 'brand', 'offers']\n    for field in required:\n        if field not in product:\n            raise ValueError(f\"Product {product.get('sku', 'unknown')} missing: {field}\")\n    \n    # Validate offer\n    offer = product['offers']\n    if 'price' not in offer or 'priceCurrency' not in offer:\n        raise ValueError(f\"Invalid offer for product {product['sku']}\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-6-deploy-your-feed",children:"Step 6: Deploy Your Feed"}),"\n",(0,r.jsx)(n.h4,{id:"option-1-static-hosting",children:"Option 1: Static Hosting"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Generate and upload to S3\npython generate_feed.py > feed.json\naws s3 cp feed.json s3://yourbucket/cmp/products/feed.json \\\n  --content-type application/json \\\n  --cache-control "public, max-age=3600"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"option-2-dynamic-api",children:"Option 2: Dynamic API"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Flask example\nfrom flask import Flask, jsonify\nimport json\n\napp = Flask(__name__)\n\n@app.route('/cmp/products/feed.json')\ndef product_feed():\n    products = fetch_products_from_db()\n    generator = CMPFeedGenerator(\"example-brand\", \"https://example.com\")\n    \n    for product_data in products:\n        generator.add_product(enrich_product(product_data))\n    \n    feed = generator.generate_feed(request.url)\n    \n    response = jsonify(feed)\n    response.headers['Cache-Control'] = 'public, max-age=3600'\n    response.headers['Content-Type'] = 'application/json'\n    return response\n\n@app.route('/cmp/products/feed-<int:shard>.json')\ndef sharded_feed(shard):\n    # Implementation for sharded feeds\n    pass\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-7-set-up-monitoring",children:"Step 7: Set Up Monitoring"}),"\n",(0,r.jsx)(n.p,{children:"Monitor your feed health:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Health check endpoint\n@app.route(\'/cmp/health\')\ndef health_check():\n    try:\n        # Check database connection\n        products_count = get_products_count()\n        \n        # Check feed generation\n        test_feed = generate_sample_feed()\n        \n        return jsonify({\n            "status": "healthy",\n            "products_count": products_count,\n            "last_updated": datetime.utcnow().isoformat()\n        })\n    except Exception as e:\n        return jsonify({\n            "status": "unhealthy",\n            "error": str(e)\n        }), 500\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cache feeds with appropriate TTL"}),"\n",(0,r.jsx)(n.li,{children:"Use CDN for global distribution"}),"\n",(0,r.jsx)(n.li,{children:"Implement ETags for efficiency"}),"\n",(0,r.jsx)(n.li,{children:"Compress with gzip"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"reliability",children:"Reliability"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement retry logic"}),"\n",(0,r.jsx)(n.li,{children:"Use health checks"}),"\n",(0,r.jsx)(n.li,{children:"Monitor feed availability"}),"\n",(0,r.jsx)(n.li,{children:"Set up alerts"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"updates",children:"Updates"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Update feeds regularly"}),"\n",(0,r.jsx)(n.li,{children:"Use webhooks for real-time updates"}),"\n",(0,r.jsx)(n.li,{children:"Implement incremental updates"}),"\n",(0,r.jsx)(n.li,{children:"Version your feed format"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(n.h3,{id:"large-catalogs",children:"Large Catalogs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement sharding"}),"\n",(0,r.jsx)(n.li,{children:"Use streaming JSON generation"}),"\n",(0,r.jsx)(n.li,{children:"Consider pagination"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"real-time-inventory",children:"Real-time Inventory"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use webhooks for updates"}),"\n",(0,r.jsx)(n.li,{children:"Implement cache invalidation"}),"\n",(0,r.jsx)(n.li,{children:"Consider event streaming"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"image-optimization",children:"Image Optimization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use CDN for images"}),"\n",(0,r.jsx)(n.li,{children:"Provide multiple resolutions"}),"\n",(0,r.jsx)(n.li,{children:"Implement lazy loading"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing-checklist",children:"Testing Checklist"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Valid JSON syntax"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Correct JSON-LD structure"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All required fields present"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Unique SKUs"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Valid URLs (HTTPS)"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Accessible images"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Proper sharding (if used)"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Performance (< 3s load time)"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Monitoring in place"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/feeds/validation",children:"Validation Guide"})," - Test your feed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/feeds/webhooks",children:"Webhook Integration"})," - Real-time updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/feeds/performance",children:"Performance Optimization"})," - Speed tips"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);